// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/super-sunshines/echo-server-core/vben/gorm/model"
)

func newSysUserDepartment(db *gorm.DB, opts ...gen.DOOption) sysUserDepartment {
	_sysUserDepartment := sysUserDepartment{}

	_sysUserDepartment.sysUserDepartmentDo.UseDB(db, opts...)
	_sysUserDepartment.sysUserDepartmentDo.UseModel(&model.SysUserDepartment{})

	tableName := _sysUserDepartment.sysUserDepartmentDo.TableName()
	_sysUserDepartment.ALL = field.NewAsterisk(tableName)
	_sysUserDepartment.ID = field.NewInt64(tableName, "id")
	_sysUserDepartment.UserID = field.NewInt64(tableName, "user_id")
	_sysUserDepartment.DepartmentID = field.NewString(tableName, "department_id")
	_sysUserDepartment.Role = field.NewString(tableName, "role")
	_sysUserDepartment.CreateDept = field.NewString(tableName, "create_dept")
	_sysUserDepartment.CreateBy = field.NewString(tableName, "create_by")
	_sysUserDepartment.CreateTime = field.NewField(tableName, "create_time")
	_sysUserDepartment.UpdateBy = field.NewString(tableName, "update_by")
	_sysUserDepartment.UpdateTime = field.NewField(tableName, "update_time")
	_sysUserDepartment.DeleteTime = field.NewField(tableName, "delete_time")

	_sysUserDepartment.fillFieldMap()

	return _sysUserDepartment
}

// sysUserDepartment 用户部门表
type sysUserDepartment struct {
	sysUserDepartmentDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键
	UserID       field.Int64  // 用户ID
	DepartmentID field.String // 部门ID
	Role         field.String // 部门中角色(未使用)
	CreateDept   field.String // 创建部门
	CreateBy     field.String // 创建者
	CreateTime   field.Field  // 创建时间
	UpdateBy     field.String // 更新者
	UpdateTime   field.Field  // 更新时间
	DeleteTime   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysUserDepartment) Table(newTableName string) *sysUserDepartment {
	s.sysUserDepartmentDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysUserDepartment) As(alias string) *sysUserDepartment {
	s.sysUserDepartmentDo.DO = *(s.sysUserDepartmentDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysUserDepartment) updateTableName(table string) *sysUserDepartment {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.DepartmentID = field.NewString(table, "department_id")
	s.Role = field.NewString(table, "role")
	s.CreateDept = field.NewString(table, "create_dept")
	s.CreateBy = field.NewString(table, "create_by")
	s.CreateTime = field.NewField(table, "create_time")
	s.UpdateBy = field.NewString(table, "update_by")
	s.UpdateTime = field.NewField(table, "update_time")
	s.DeleteTime = field.NewField(table, "delete_time")

	s.fillFieldMap()

	return s
}

func (s *sysUserDepartment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysUserDepartment) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["department_id"] = s.DepartmentID
	s.fieldMap["role"] = s.Role
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["delete_time"] = s.DeleteTime
}

func (s sysUserDepartment) clone(db *gorm.DB) sysUserDepartment {
	s.sysUserDepartmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysUserDepartment) replaceDB(db *gorm.DB) sysUserDepartment {
	s.sysUserDepartmentDo.ReplaceDB(db)
	return s
}

type sysUserDepartmentDo struct{ gen.DO }

type ISysUserDepartmentDo interface {
	gen.SubQuery
	Debug() ISysUserDepartmentDo
	WithContext(ctx context.Context) ISysUserDepartmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysUserDepartmentDo
	WriteDB() ISysUserDepartmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysUserDepartmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysUserDepartmentDo
	Not(conds ...gen.Condition) ISysUserDepartmentDo
	Or(conds ...gen.Condition) ISysUserDepartmentDo
	Select(conds ...field.Expr) ISysUserDepartmentDo
	Where(conds ...gen.Condition) ISysUserDepartmentDo
	Order(conds ...field.Expr) ISysUserDepartmentDo
	Distinct(cols ...field.Expr) ISysUserDepartmentDo
	Omit(cols ...field.Expr) ISysUserDepartmentDo
	Join(table schema.Tabler, on ...field.Expr) ISysUserDepartmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysUserDepartmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysUserDepartmentDo
	Group(cols ...field.Expr) ISysUserDepartmentDo
	Having(conds ...gen.Condition) ISysUserDepartmentDo
	Limit(limit int) ISysUserDepartmentDo
	Offset(offset int) ISysUserDepartmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUserDepartmentDo
	Unscoped() ISysUserDepartmentDo
	Create(values ...*model.SysUserDepartment) error
	CreateInBatches(values []*model.SysUserDepartment, batchSize int) error
	Save(values ...*model.SysUserDepartment) error
	First() (*model.SysUserDepartment, error)
	Take() (*model.SysUserDepartment, error)
	Last() (*model.SysUserDepartment, error)
	Find() ([]*model.SysUserDepartment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUserDepartment, err error)
	FindInBatches(result *[]*model.SysUserDepartment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysUserDepartment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysUserDepartmentDo
	Assign(attrs ...field.AssignExpr) ISysUserDepartmentDo
	Joins(fields ...field.RelationField) ISysUserDepartmentDo
	Preload(fields ...field.RelationField) ISysUserDepartmentDo
	FirstOrInit() (*model.SysUserDepartment, error)
	FirstOrCreate() (*model.SysUserDepartment, error)
	FindByPage(offset int, limit int) (result []*model.SysUserDepartment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysUserDepartmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysUserDepartmentDo) Debug() ISysUserDepartmentDo {
	return s.withDO(s.DO.Debug())
}

func (s sysUserDepartmentDo) WithContext(ctx context.Context) ISysUserDepartmentDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysUserDepartmentDo) ReadDB() ISysUserDepartmentDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysUserDepartmentDo) WriteDB() ISysUserDepartmentDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysUserDepartmentDo) Session(config *gorm.Session) ISysUserDepartmentDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysUserDepartmentDo) Clauses(conds ...clause.Expression) ISysUserDepartmentDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysUserDepartmentDo) Returning(value interface{}, columns ...string) ISysUserDepartmentDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysUserDepartmentDo) Not(conds ...gen.Condition) ISysUserDepartmentDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysUserDepartmentDo) Or(conds ...gen.Condition) ISysUserDepartmentDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysUserDepartmentDo) Select(conds ...field.Expr) ISysUserDepartmentDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysUserDepartmentDo) Where(conds ...gen.Condition) ISysUserDepartmentDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysUserDepartmentDo) Order(conds ...field.Expr) ISysUserDepartmentDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysUserDepartmentDo) Distinct(cols ...field.Expr) ISysUserDepartmentDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysUserDepartmentDo) Omit(cols ...field.Expr) ISysUserDepartmentDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysUserDepartmentDo) Join(table schema.Tabler, on ...field.Expr) ISysUserDepartmentDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysUserDepartmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysUserDepartmentDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysUserDepartmentDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysUserDepartmentDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysUserDepartmentDo) Group(cols ...field.Expr) ISysUserDepartmentDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysUserDepartmentDo) Having(conds ...gen.Condition) ISysUserDepartmentDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysUserDepartmentDo) Limit(limit int) ISysUserDepartmentDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysUserDepartmentDo) Offset(offset int) ISysUserDepartmentDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysUserDepartmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUserDepartmentDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysUserDepartmentDo) Unscoped() ISysUserDepartmentDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysUserDepartmentDo) Create(values ...*model.SysUserDepartment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysUserDepartmentDo) CreateInBatches(values []*model.SysUserDepartment, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysUserDepartmentDo) Save(values ...*model.SysUserDepartment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysUserDepartmentDo) First() (*model.SysUserDepartment, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserDepartment), nil
	}
}

func (s sysUserDepartmentDo) Take() (*model.SysUserDepartment, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserDepartment), nil
	}
}

func (s sysUserDepartmentDo) Last() (*model.SysUserDepartment, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserDepartment), nil
	}
}

func (s sysUserDepartmentDo) Find() ([]*model.SysUserDepartment, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysUserDepartment), err
}

func (s sysUserDepartmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUserDepartment, err error) {
	buf := make([]*model.SysUserDepartment, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysUserDepartmentDo) FindInBatches(result *[]*model.SysUserDepartment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysUserDepartmentDo) Attrs(attrs ...field.AssignExpr) ISysUserDepartmentDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysUserDepartmentDo) Assign(attrs ...field.AssignExpr) ISysUserDepartmentDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysUserDepartmentDo) Joins(fields ...field.RelationField) ISysUserDepartmentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysUserDepartmentDo) Preload(fields ...field.RelationField) ISysUserDepartmentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysUserDepartmentDo) FirstOrInit() (*model.SysUserDepartment, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserDepartment), nil
	}
}

func (s sysUserDepartmentDo) FirstOrCreate() (*model.SysUserDepartment, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserDepartment), nil
	}
}

func (s sysUserDepartmentDo) FindByPage(offset int, limit int) (result []*model.SysUserDepartment, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysUserDepartmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysUserDepartmentDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysUserDepartmentDo) Delete(models ...*model.SysUserDepartment) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysUserDepartmentDo) withDO(do gen.Dao) *sysUserDepartmentDo {
	s.DO = *do.(*gen.DO)
	return s
}
