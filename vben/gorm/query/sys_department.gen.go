// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/super-sunshines/echo-server-core/vben/gorm/model"
)

func newSysDepartment(db *gorm.DB, opts ...gen.DOOption) sysDepartment {
	_sysDepartment := sysDepartment{}

	_sysDepartment.sysDepartmentDo.UseDB(db, opts...)
	_sysDepartment.sysDepartmentDo.UseModel(&model.SysDepartment{})

	tableName := _sysDepartment.sysDepartmentDo.TableName()
	_sysDepartment.ALL = field.NewAsterisk(tableName)
	_sysDepartment.ID = field.NewInt64(tableName, "id")
	_sysDepartment.Pid = field.NewInt64(tableName, "pid")
	_sysDepartment.Name = field.NewString(tableName, "name")
	_sysDepartment.OrderNum = field.NewInt64(tableName, "order_num")
	_sysDepartment.Description = field.NewString(tableName, "description")
	_sysDepartment.EnableStatus = field.NewInt64(tableName, "enable_status")
	_sysDepartment.CreateDept = field.NewInt64(tableName, "create_dept")
	_sysDepartment.CreateBy = field.NewInt64(tableName, "create_by")
	_sysDepartment.CreateTime = field.NewField(tableName, "create_time")
	_sysDepartment.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysDepartment.UpdateTime = field.NewField(tableName, "update_time")
	_sysDepartment.DeleteTime = field.NewField(tableName, "delete_time")

	_sysDepartment.fillFieldMap()

	return _sysDepartment
}

type sysDepartment struct {
	sysDepartmentDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键
	Pid          field.Int64  // 父ID
	Name         field.String // 部门名称
	OrderNum     field.Int64  // 排序
	Description  field.String // 权限描述
	EnableStatus field.Int64  // 部门状态
	CreateDept   field.Int64  // 创建部门
	CreateBy     field.Int64  // 创建者
	CreateTime   field.Field  // 创建时间
	UpdateBy     field.Int64  // 更新者
	UpdateTime   field.Field  // 更新时间
	DeleteTime   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysDepartment) Table(newTableName string) *sysDepartment {
	s.sysDepartmentDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysDepartment) As(alias string) *sysDepartment {
	s.sysDepartmentDo.DO = *(s.sysDepartmentDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysDepartment) updateTableName(table string) *sysDepartment {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Pid = field.NewInt64(table, "pid")
	s.Name = field.NewString(table, "name")
	s.OrderNum = field.NewInt64(table, "order_num")
	s.Description = field.NewString(table, "description")
	s.EnableStatus = field.NewInt64(table, "enable_status")
	s.CreateDept = field.NewInt64(table, "create_dept")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewField(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewField(table, "update_time")
	s.DeleteTime = field.NewField(table, "delete_time")

	s.fillFieldMap()

	return s
}

func (s *sysDepartment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysDepartment) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["pid"] = s.Pid
	s.fieldMap["name"] = s.Name
	s.fieldMap["order_num"] = s.OrderNum
	s.fieldMap["description"] = s.Description
	s.fieldMap["enable_status"] = s.EnableStatus
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["delete_time"] = s.DeleteTime
}

func (s sysDepartment) clone(db *gorm.DB) sysDepartment {
	s.sysDepartmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysDepartment) replaceDB(db *gorm.DB) sysDepartment {
	s.sysDepartmentDo.ReplaceDB(db)
	return s
}

type sysDepartmentDo struct{ gen.DO }

type ISysDepartmentDo interface {
	gen.SubQuery
	Debug() ISysDepartmentDo
	WithContext(ctx context.Context) ISysDepartmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysDepartmentDo
	WriteDB() ISysDepartmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysDepartmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysDepartmentDo
	Not(conds ...gen.Condition) ISysDepartmentDo
	Or(conds ...gen.Condition) ISysDepartmentDo
	Select(conds ...field.Expr) ISysDepartmentDo
	Where(conds ...gen.Condition) ISysDepartmentDo
	Order(conds ...field.Expr) ISysDepartmentDo
	Distinct(cols ...field.Expr) ISysDepartmentDo
	Omit(cols ...field.Expr) ISysDepartmentDo
	Join(table schema.Tabler, on ...field.Expr) ISysDepartmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysDepartmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysDepartmentDo
	Group(cols ...field.Expr) ISysDepartmentDo
	Having(conds ...gen.Condition) ISysDepartmentDo
	Limit(limit int) ISysDepartmentDo
	Offset(offset int) ISysDepartmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDepartmentDo
	Unscoped() ISysDepartmentDo
	Create(values ...*model.SysDepartment) error
	CreateInBatches(values []*model.SysDepartment, batchSize int) error
	Save(values ...*model.SysDepartment) error
	First() (*model.SysDepartment, error)
	Take() (*model.SysDepartment, error)
	Last() (*model.SysDepartment, error)
	Find() ([]*model.SysDepartment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDepartment, err error)
	FindInBatches(result *[]*model.SysDepartment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysDepartment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysDepartmentDo
	Assign(attrs ...field.AssignExpr) ISysDepartmentDo
	Joins(fields ...field.RelationField) ISysDepartmentDo
	Preload(fields ...field.RelationField) ISysDepartmentDo
	FirstOrInit() (*model.SysDepartment, error)
	FirstOrCreate() (*model.SysDepartment, error)
	FindByPage(offset int, limit int) (result []*model.SysDepartment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysDepartmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysDepartmentDo) Debug() ISysDepartmentDo {
	return s.withDO(s.DO.Debug())
}

func (s sysDepartmentDo) WithContext(ctx context.Context) ISysDepartmentDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysDepartmentDo) ReadDB() ISysDepartmentDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysDepartmentDo) WriteDB() ISysDepartmentDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysDepartmentDo) Session(config *gorm.Session) ISysDepartmentDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysDepartmentDo) Clauses(conds ...clause.Expression) ISysDepartmentDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysDepartmentDo) Returning(value interface{}, columns ...string) ISysDepartmentDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysDepartmentDo) Not(conds ...gen.Condition) ISysDepartmentDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysDepartmentDo) Or(conds ...gen.Condition) ISysDepartmentDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysDepartmentDo) Select(conds ...field.Expr) ISysDepartmentDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysDepartmentDo) Where(conds ...gen.Condition) ISysDepartmentDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysDepartmentDo) Order(conds ...field.Expr) ISysDepartmentDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysDepartmentDo) Distinct(cols ...field.Expr) ISysDepartmentDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysDepartmentDo) Omit(cols ...field.Expr) ISysDepartmentDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysDepartmentDo) Join(table schema.Tabler, on ...field.Expr) ISysDepartmentDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysDepartmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysDepartmentDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysDepartmentDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysDepartmentDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysDepartmentDo) Group(cols ...field.Expr) ISysDepartmentDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysDepartmentDo) Having(conds ...gen.Condition) ISysDepartmentDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysDepartmentDo) Limit(limit int) ISysDepartmentDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysDepartmentDo) Offset(offset int) ISysDepartmentDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysDepartmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDepartmentDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysDepartmentDo) Unscoped() ISysDepartmentDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysDepartmentDo) Create(values ...*model.SysDepartment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysDepartmentDo) CreateInBatches(values []*model.SysDepartment, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysDepartmentDo) Save(values ...*model.SysDepartment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysDepartmentDo) First() (*model.SysDepartment, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDepartment), nil
	}
}

func (s sysDepartmentDo) Take() (*model.SysDepartment, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDepartment), nil
	}
}

func (s sysDepartmentDo) Last() (*model.SysDepartment, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDepartment), nil
	}
}

func (s sysDepartmentDo) Find() ([]*model.SysDepartment, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysDepartment), err
}

func (s sysDepartmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDepartment, err error) {
	buf := make([]*model.SysDepartment, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysDepartmentDo) FindInBatches(result *[]*model.SysDepartment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysDepartmentDo) Attrs(attrs ...field.AssignExpr) ISysDepartmentDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysDepartmentDo) Assign(attrs ...field.AssignExpr) ISysDepartmentDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysDepartmentDo) Joins(fields ...field.RelationField) ISysDepartmentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysDepartmentDo) Preload(fields ...field.RelationField) ISysDepartmentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysDepartmentDo) FirstOrInit() (*model.SysDepartment, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDepartment), nil
	}
}

func (s sysDepartmentDo) FirstOrCreate() (*model.SysDepartment, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDepartment), nil
	}
}

func (s sysDepartmentDo) FindByPage(offset int, limit int) (result []*model.SysDepartment, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysDepartmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysDepartmentDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysDepartmentDo) Delete(models ...*model.SysDepartment) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysDepartmentDo) withDO(do gen.Dao) *sysDepartmentDo {
	s.DO = *do.(*gen.DO)
	return s
}
