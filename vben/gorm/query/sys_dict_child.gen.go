// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/super-sunshines/echo-server-core/vben/gorm/model"
)

func newSysDictChild(db *gorm.DB, opts ...gen.DOOption) sysDictChild {
	_sysDictChild := sysDictChild{}

	_sysDictChild.sysDictChildDo.UseDB(db, opts...)
	_sysDictChild.sysDictChildDo.UseModel(&model.SysDictChild{})

	tableName := _sysDictChild.sysDictChildDo.TableName()
	_sysDictChild.ALL = field.NewAsterisk(tableName)
	_sysDictChild.ID = field.NewInt64(tableName, "id")
	_sysDictChild.DictCode = field.NewString(tableName, "dict_code")
	_sysDictChild.Type = field.NewInt64(tableName, "type")
	_sysDictChild.Value = field.NewString(tableName, "value")
	_sysDictChild.Label = field.NewString(tableName, "label")
	_sysDictChild.Style = field.NewString(tableName, "style")
	_sysDictChild.Describe = field.NewString(tableName, "describe")
	_sysDictChild.OrderNum = field.NewInt64(tableName, "order_num")
	_sysDictChild.ItemClass = field.NewString(tableName, "item_class")
	_sysDictChild.CreateDept = field.NewInt64(tableName, "create_dept")
	_sysDictChild.CreateBy = field.NewInt64(tableName, "create_by")
	_sysDictChild.CreateTime = field.NewField(tableName, "create_time")
	_sysDictChild.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysDictChild.UpdateTime = field.NewField(tableName, "update_time")
	_sysDictChild.DeleteTime = field.NewField(tableName, "delete_time")

	_sysDictChild.fillFieldMap()

	return _sysDictChild
}

type sysDictChild struct {
	sysDictChildDo

	ALL        field.Asterisk
	ID         field.Int64
	DictCode   field.String // 字典代码
	Type       field.Int64  // 值类型
	Value      field.String // 值
	Label      field.String // 标签
	Style      field.String // 样式
	Describe   field.String // 描述
	OrderNum   field.Int64  // 排序字符串
	ItemClass  field.String // 样式标签页
	CreateDept field.Int64  // 创建部门
	CreateBy   field.Int64  // 创建者
	CreateTime field.Field  // 创建时间
	UpdateBy   field.Int64  // 更新者
	UpdateTime field.Field  // 更新时间
	DeleteTime field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysDictChild) Table(newTableName string) *sysDictChild {
	s.sysDictChildDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysDictChild) As(alias string) *sysDictChild {
	s.sysDictChildDo.DO = *(s.sysDictChildDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysDictChild) updateTableName(table string) *sysDictChild {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.DictCode = field.NewString(table, "dict_code")
	s.Type = field.NewInt64(table, "type")
	s.Value = field.NewString(table, "value")
	s.Label = field.NewString(table, "label")
	s.Style = field.NewString(table, "style")
	s.Describe = field.NewString(table, "describe")
	s.OrderNum = field.NewInt64(table, "order_num")
	s.ItemClass = field.NewString(table, "item_class")
	s.CreateDept = field.NewInt64(table, "create_dept")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewField(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewField(table, "update_time")
	s.DeleteTime = field.NewField(table, "delete_time")

	s.fillFieldMap()

	return s
}

func (s *sysDictChild) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysDictChild) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["id"] = s.ID
	s.fieldMap["dict_code"] = s.DictCode
	s.fieldMap["type"] = s.Type
	s.fieldMap["value"] = s.Value
	s.fieldMap["label"] = s.Label
	s.fieldMap["style"] = s.Style
	s.fieldMap["describe"] = s.Describe
	s.fieldMap["order_num"] = s.OrderNum
	s.fieldMap["item_class"] = s.ItemClass
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["delete_time"] = s.DeleteTime
}

func (s sysDictChild) clone(db *gorm.DB) sysDictChild {
	s.sysDictChildDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysDictChild) replaceDB(db *gorm.DB) sysDictChild {
	s.sysDictChildDo.ReplaceDB(db)
	return s
}

type sysDictChildDo struct{ gen.DO }

type ISysDictChildDo interface {
	gen.SubQuery
	Debug() ISysDictChildDo
	WithContext(ctx context.Context) ISysDictChildDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysDictChildDo
	WriteDB() ISysDictChildDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysDictChildDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysDictChildDo
	Not(conds ...gen.Condition) ISysDictChildDo
	Or(conds ...gen.Condition) ISysDictChildDo
	Select(conds ...field.Expr) ISysDictChildDo
	Where(conds ...gen.Condition) ISysDictChildDo
	Order(conds ...field.Expr) ISysDictChildDo
	Distinct(cols ...field.Expr) ISysDictChildDo
	Omit(cols ...field.Expr) ISysDictChildDo
	Join(table schema.Tabler, on ...field.Expr) ISysDictChildDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysDictChildDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysDictChildDo
	Group(cols ...field.Expr) ISysDictChildDo
	Having(conds ...gen.Condition) ISysDictChildDo
	Limit(limit int) ISysDictChildDo
	Offset(offset int) ISysDictChildDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDictChildDo
	Unscoped() ISysDictChildDo
	Create(values ...*model.SysDictChild) error
	CreateInBatches(values []*model.SysDictChild, batchSize int) error
	Save(values ...*model.SysDictChild) error
	First() (*model.SysDictChild, error)
	Take() (*model.SysDictChild, error)
	Last() (*model.SysDictChild, error)
	Find() ([]*model.SysDictChild, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDictChild, err error)
	FindInBatches(result *[]*model.SysDictChild, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysDictChild) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysDictChildDo
	Assign(attrs ...field.AssignExpr) ISysDictChildDo
	Joins(fields ...field.RelationField) ISysDictChildDo
	Preload(fields ...field.RelationField) ISysDictChildDo
	FirstOrInit() (*model.SysDictChild, error)
	FirstOrCreate() (*model.SysDictChild, error)
	FindByPage(offset int, limit int) (result []*model.SysDictChild, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysDictChildDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysDictChildDo) Debug() ISysDictChildDo {
	return s.withDO(s.DO.Debug())
}

func (s sysDictChildDo) WithContext(ctx context.Context) ISysDictChildDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysDictChildDo) ReadDB() ISysDictChildDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysDictChildDo) WriteDB() ISysDictChildDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysDictChildDo) Session(config *gorm.Session) ISysDictChildDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysDictChildDo) Clauses(conds ...clause.Expression) ISysDictChildDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysDictChildDo) Returning(value interface{}, columns ...string) ISysDictChildDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysDictChildDo) Not(conds ...gen.Condition) ISysDictChildDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysDictChildDo) Or(conds ...gen.Condition) ISysDictChildDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysDictChildDo) Select(conds ...field.Expr) ISysDictChildDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysDictChildDo) Where(conds ...gen.Condition) ISysDictChildDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysDictChildDo) Order(conds ...field.Expr) ISysDictChildDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysDictChildDo) Distinct(cols ...field.Expr) ISysDictChildDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysDictChildDo) Omit(cols ...field.Expr) ISysDictChildDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysDictChildDo) Join(table schema.Tabler, on ...field.Expr) ISysDictChildDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysDictChildDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysDictChildDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysDictChildDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysDictChildDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysDictChildDo) Group(cols ...field.Expr) ISysDictChildDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysDictChildDo) Having(conds ...gen.Condition) ISysDictChildDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysDictChildDo) Limit(limit int) ISysDictChildDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysDictChildDo) Offset(offset int) ISysDictChildDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysDictChildDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDictChildDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysDictChildDo) Unscoped() ISysDictChildDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysDictChildDo) Create(values ...*model.SysDictChild) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysDictChildDo) CreateInBatches(values []*model.SysDictChild, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysDictChildDo) Save(values ...*model.SysDictChild) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysDictChildDo) First() (*model.SysDictChild, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictChild), nil
	}
}

func (s sysDictChildDo) Take() (*model.SysDictChild, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictChild), nil
	}
}

func (s sysDictChildDo) Last() (*model.SysDictChild, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictChild), nil
	}
}

func (s sysDictChildDo) Find() ([]*model.SysDictChild, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysDictChild), err
}

func (s sysDictChildDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDictChild, err error) {
	buf := make([]*model.SysDictChild, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysDictChildDo) FindInBatches(result *[]*model.SysDictChild, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysDictChildDo) Attrs(attrs ...field.AssignExpr) ISysDictChildDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysDictChildDo) Assign(attrs ...field.AssignExpr) ISysDictChildDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysDictChildDo) Joins(fields ...field.RelationField) ISysDictChildDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysDictChildDo) Preload(fields ...field.RelationField) ISysDictChildDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysDictChildDo) FirstOrInit() (*model.SysDictChild, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictChild), nil
	}
}

func (s sysDictChildDo) FirstOrCreate() (*model.SysDictChild, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictChild), nil
	}
}

func (s sysDictChildDo) FindByPage(offset int, limit int) (result []*model.SysDictChild, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysDictChildDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysDictChildDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysDictChildDo) Delete(models ...*model.SysDictChild) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysDictChildDo) withDO(do gen.Dao) *sysDictChildDo {
	s.DO = *do.(*gen.DO)
	return s
}
