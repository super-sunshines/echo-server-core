// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/super-sunshines/echo-server-core/vben/gorm/model"
)

func newSysMenuMetum(db *gorm.DB, opts ...gen.DOOption) sysMenuMetum {
	_sysMenuMetum := sysMenuMetum{}

	_sysMenuMetum.sysMenuMetumDo.UseDB(db, opts...)
	_sysMenuMetum.sysMenuMetumDo.UseModel(&model.SysMenuMetum{})

	tableName := _sysMenuMetum.sysMenuMetumDo.TableName()
	_sysMenuMetum.ALL = field.NewAsterisk(tableName)
	_sysMenuMetum.ID = field.NewInt64(tableName, "id")
	_sysMenuMetum.Title = field.NewString(tableName, "title")
	_sysMenuMetum.Icon = field.NewString(tableName, "icon")
	_sysMenuMetum.OrderNum = field.NewInt64(tableName, "order_num")
	_sysMenuMetum.ActiveIcon = field.NewString(tableName, "active_icon")
	_sysMenuMetum.HideInMenu = field.NewField(tableName, "hide_in_menu")
	_sysMenuMetum.HideInTab = field.NewField(tableName, "hide_in_tab")
	_sysMenuMetum.HideInBreadcrumb = field.NewField(tableName, "hide_in_breadcrumb")
	_sysMenuMetum.HideChildrenInMenu = field.NewField(tableName, "hide_children_in_menu")
	_sysMenuMetum.Authority = field.NewField(tableName, "authority")
	_sysMenuMetum.ActivePath = field.NewString(tableName, "active_path")
	_sysMenuMetum.AffixTab = field.NewField(tableName, "affix_tab")
	_sysMenuMetum.AffixTabOrder = field.NewInt64(tableName, "affix_tab_order")
	_sysMenuMetum.IframeSrc = field.NewString(tableName, "iframe_src")
	_sysMenuMetum.IgnoreAccess = field.NewField(tableName, "ignore_access")
	_sysMenuMetum.Link = field.NewString(tableName, "link")
	_sysMenuMetum.OpenInNewWindow = field.NewField(tableName, "open_in_new_window")
	_sysMenuMetum.NoBasicLayout = field.NewField(tableName, "no_basic_layout")
	_sysMenuMetum.CreateDept = field.NewInt64(tableName, "create_dept")
	_sysMenuMetum.CreateBy = field.NewInt64(tableName, "create_by")
	_sysMenuMetum.CreateTime = field.NewField(tableName, "create_time")
	_sysMenuMetum.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysMenuMetum.UpdateTime = field.NewField(tableName, "update_time")
	_sysMenuMetum.DeleteTime = field.NewField(tableName, "delete_time")

	_sysMenuMetum.fillFieldMap()

	return _sysMenuMetum
}

type sysMenuMetum struct {
	sysMenuMetumDo

	ALL                field.Asterisk
	ID                 field.Int64  // id
	Title              field.String // 路由名称
	Icon               field.String // 访问路径
	OrderNum           field.Int64  // 排序
	ActiveIcon         field.String // 激活时的Icon
	HideInMenu         field.Field  // 隐藏菜单
	HideInTab          field.Field  // 标签页隐藏
	HideInBreadcrumb   field.Field  // 面包屑中隐藏
	HideChildrenInMenu field.Field  // 子菜单隐藏
	Authority          field.Field  // 权限代码数组
	ActivePath         field.String // 激活的菜单
	AffixTab           field.Field  // 固定标签
	AffixTabOrder      field.Int64  // 固定标签排序
	IframeSrc          field.String // 内嵌iframe地址
	IgnoreAccess       field.Field  // 忽略权限
	Link               field.String // 跳转打开地址
	OpenInNewWindow    field.Field  // 在新窗口打开
	NoBasicLayout      field.Field  // 基础布局
	CreateDept         field.Int64  // 创建部门
	CreateBy           field.Int64  // 创建者
	CreateTime         field.Field  // 创建时间
	UpdateBy           field.Int64  // 更新者
	UpdateTime         field.Field  // 更新时间
	DeleteTime         field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysMenuMetum) Table(newTableName string) *sysMenuMetum {
	s.sysMenuMetumDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysMenuMetum) As(alias string) *sysMenuMetum {
	s.sysMenuMetumDo.DO = *(s.sysMenuMetumDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysMenuMetum) updateTableName(table string) *sysMenuMetum {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Title = field.NewString(table, "title")
	s.Icon = field.NewString(table, "icon")
	s.OrderNum = field.NewInt64(table, "order_num")
	s.ActiveIcon = field.NewString(table, "active_icon")
	s.HideInMenu = field.NewField(table, "hide_in_menu")
	s.HideInTab = field.NewField(table, "hide_in_tab")
	s.HideInBreadcrumb = field.NewField(table, "hide_in_breadcrumb")
	s.HideChildrenInMenu = field.NewField(table, "hide_children_in_menu")
	s.Authority = field.NewField(table, "authority")
	s.ActivePath = field.NewString(table, "active_path")
	s.AffixTab = field.NewField(table, "affix_tab")
	s.AffixTabOrder = field.NewInt64(table, "affix_tab_order")
	s.IframeSrc = field.NewString(table, "iframe_src")
	s.IgnoreAccess = field.NewField(table, "ignore_access")
	s.Link = field.NewString(table, "link")
	s.OpenInNewWindow = field.NewField(table, "open_in_new_window")
	s.NoBasicLayout = field.NewField(table, "no_basic_layout")
	s.CreateDept = field.NewInt64(table, "create_dept")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewField(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewField(table, "update_time")
	s.DeleteTime = field.NewField(table, "delete_time")

	s.fillFieldMap()

	return s
}

func (s *sysMenuMetum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysMenuMetum) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 24)
	s.fieldMap["id"] = s.ID
	s.fieldMap["title"] = s.Title
	s.fieldMap["icon"] = s.Icon
	s.fieldMap["order_num"] = s.OrderNum
	s.fieldMap["active_icon"] = s.ActiveIcon
	s.fieldMap["hide_in_menu"] = s.HideInMenu
	s.fieldMap["hide_in_tab"] = s.HideInTab
	s.fieldMap["hide_in_breadcrumb"] = s.HideInBreadcrumb
	s.fieldMap["hide_children_in_menu"] = s.HideChildrenInMenu
	s.fieldMap["authority"] = s.Authority
	s.fieldMap["active_path"] = s.ActivePath
	s.fieldMap["affix_tab"] = s.AffixTab
	s.fieldMap["affix_tab_order"] = s.AffixTabOrder
	s.fieldMap["iframe_src"] = s.IframeSrc
	s.fieldMap["ignore_access"] = s.IgnoreAccess
	s.fieldMap["link"] = s.Link
	s.fieldMap["open_in_new_window"] = s.OpenInNewWindow
	s.fieldMap["no_basic_layout"] = s.NoBasicLayout
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["delete_time"] = s.DeleteTime
}

func (s sysMenuMetum) clone(db *gorm.DB) sysMenuMetum {
	s.sysMenuMetumDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysMenuMetum) replaceDB(db *gorm.DB) sysMenuMetum {
	s.sysMenuMetumDo.ReplaceDB(db)
	return s
}

type sysMenuMetumDo struct{ gen.DO }

type ISysMenuMetumDo interface {
	gen.SubQuery
	Debug() ISysMenuMetumDo
	WithContext(ctx context.Context) ISysMenuMetumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysMenuMetumDo
	WriteDB() ISysMenuMetumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysMenuMetumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysMenuMetumDo
	Not(conds ...gen.Condition) ISysMenuMetumDo
	Or(conds ...gen.Condition) ISysMenuMetumDo
	Select(conds ...field.Expr) ISysMenuMetumDo
	Where(conds ...gen.Condition) ISysMenuMetumDo
	Order(conds ...field.Expr) ISysMenuMetumDo
	Distinct(cols ...field.Expr) ISysMenuMetumDo
	Omit(cols ...field.Expr) ISysMenuMetumDo
	Join(table schema.Tabler, on ...field.Expr) ISysMenuMetumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuMetumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuMetumDo
	Group(cols ...field.Expr) ISysMenuMetumDo
	Having(conds ...gen.Condition) ISysMenuMetumDo
	Limit(limit int) ISysMenuMetumDo
	Offset(offset int) ISysMenuMetumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuMetumDo
	Unscoped() ISysMenuMetumDo
	Create(values ...*model.SysMenuMetum) error
	CreateInBatches(values []*model.SysMenuMetum, batchSize int) error
	Save(values ...*model.SysMenuMetum) error
	First() (*model.SysMenuMetum, error)
	Take() (*model.SysMenuMetum, error)
	Last() (*model.SysMenuMetum, error)
	Find() ([]*model.SysMenuMetum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysMenuMetum, err error)
	FindInBatches(result *[]*model.SysMenuMetum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysMenuMetum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysMenuMetumDo
	Assign(attrs ...field.AssignExpr) ISysMenuMetumDo
	Joins(fields ...field.RelationField) ISysMenuMetumDo
	Preload(fields ...field.RelationField) ISysMenuMetumDo
	FirstOrInit() (*model.SysMenuMetum, error)
	FirstOrCreate() (*model.SysMenuMetum, error)
	FindByPage(offset int, limit int) (result []*model.SysMenuMetum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysMenuMetumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysMenuMetumDo) Debug() ISysMenuMetumDo {
	return s.withDO(s.DO.Debug())
}

func (s sysMenuMetumDo) WithContext(ctx context.Context) ISysMenuMetumDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysMenuMetumDo) ReadDB() ISysMenuMetumDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysMenuMetumDo) WriteDB() ISysMenuMetumDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysMenuMetumDo) Session(config *gorm.Session) ISysMenuMetumDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysMenuMetumDo) Clauses(conds ...clause.Expression) ISysMenuMetumDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysMenuMetumDo) Returning(value interface{}, columns ...string) ISysMenuMetumDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysMenuMetumDo) Not(conds ...gen.Condition) ISysMenuMetumDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysMenuMetumDo) Or(conds ...gen.Condition) ISysMenuMetumDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysMenuMetumDo) Select(conds ...field.Expr) ISysMenuMetumDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysMenuMetumDo) Where(conds ...gen.Condition) ISysMenuMetumDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysMenuMetumDo) Order(conds ...field.Expr) ISysMenuMetumDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysMenuMetumDo) Distinct(cols ...field.Expr) ISysMenuMetumDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysMenuMetumDo) Omit(cols ...field.Expr) ISysMenuMetumDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysMenuMetumDo) Join(table schema.Tabler, on ...field.Expr) ISysMenuMetumDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysMenuMetumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuMetumDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysMenuMetumDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuMetumDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysMenuMetumDo) Group(cols ...field.Expr) ISysMenuMetumDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysMenuMetumDo) Having(conds ...gen.Condition) ISysMenuMetumDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysMenuMetumDo) Limit(limit int) ISysMenuMetumDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysMenuMetumDo) Offset(offset int) ISysMenuMetumDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysMenuMetumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuMetumDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysMenuMetumDo) Unscoped() ISysMenuMetumDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysMenuMetumDo) Create(values ...*model.SysMenuMetum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysMenuMetumDo) CreateInBatches(values []*model.SysMenuMetum, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysMenuMetumDo) Save(values ...*model.SysMenuMetum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysMenuMetumDo) First() (*model.SysMenuMetum, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuMetum), nil
	}
}

func (s sysMenuMetumDo) Take() (*model.SysMenuMetum, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuMetum), nil
	}
}

func (s sysMenuMetumDo) Last() (*model.SysMenuMetum, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuMetum), nil
	}
}

func (s sysMenuMetumDo) Find() ([]*model.SysMenuMetum, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysMenuMetum), err
}

func (s sysMenuMetumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysMenuMetum, err error) {
	buf := make([]*model.SysMenuMetum, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysMenuMetumDo) FindInBatches(result *[]*model.SysMenuMetum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysMenuMetumDo) Attrs(attrs ...field.AssignExpr) ISysMenuMetumDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysMenuMetumDo) Assign(attrs ...field.AssignExpr) ISysMenuMetumDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysMenuMetumDo) Joins(fields ...field.RelationField) ISysMenuMetumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysMenuMetumDo) Preload(fields ...field.RelationField) ISysMenuMetumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysMenuMetumDo) FirstOrInit() (*model.SysMenuMetum, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuMetum), nil
	}
}

func (s sysMenuMetumDo) FirstOrCreate() (*model.SysMenuMetum, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuMetum), nil
	}
}

func (s sysMenuMetumDo) FindByPage(offset int, limit int) (result []*model.SysMenuMetum, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysMenuMetumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysMenuMetumDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysMenuMetumDo) Delete(models ...*model.SysMenuMetum) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysMenuMetumDo) withDO(do gen.Dao) *sysMenuMetumDo {
	s.DO = *do.(*gen.DO)
	return s
}
