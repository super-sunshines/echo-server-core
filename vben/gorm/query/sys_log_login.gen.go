// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/super-sunshines/echo-server-core/vben/gorm/model"
)

func newSysLogLogin(db *gorm.DB, opts ...gen.DOOption) sysLogLogin {
	_sysLogLogin := sysLogLogin{}

	_sysLogLogin.sysLogLoginDo.UseDB(db, opts...)
	_sysLogLogin.sysLogLoginDo.UseModel(&model.SysLogLogin{})

	tableName := _sysLogLogin.sysLogLoginDo.TableName()
	_sysLogLogin.ALL = field.NewAsterisk(tableName)
	_sysLogLogin.ID = field.NewInt64(tableName, "id")
	_sysLogLogin.LoginType = field.NewInt64(tableName, "login_type")
	_sysLogLogin.RequestMethod = field.NewString(tableName, "request_method")
	_sysLogLogin.UserAgent = field.NewString(tableName, "user_agent")
	_sysLogLogin.OperateName = field.NewString(tableName, "operate_name")
	_sysLogLogin.Status = field.NewInt64(tableName, "status")
	_sysLogLogin.Browser = field.NewString(tableName, "browser")
	_sysLogLogin.Os = field.NewString(tableName, "os")
	_sysLogLogin.OperateIP = field.NewString(tableName, "operate_ip")
	_sysLogLogin.OperateLocation = field.NewString(tableName, "operate_location")
	_sysLogLogin.Msg = field.NewString(tableName, "msg")
	_sysLogLogin.OperateTime = field.NewField(tableName, "operate_time")

	_sysLogLogin.fillFieldMap()

	return _sysLogLogin
}

type sysLogLogin struct {
	sysLogLoginDo

	ALL             field.Asterisk
	ID              field.Int64  // 主键
	LoginType       field.Int64  // 登录方式
	RequestMethod   field.String // 请求方法
	UserAgent       field.String // 信息
	OperateName     field.String // 操作人员
	Status          field.Int64  // 登录状态
	Browser         field.String // 浏览器类型
	Os              field.String // 操作系统
	OperateIP       field.String // 请求IP
	OperateLocation field.String // 请求地点
	Msg             field.String // 错误信息
	OperateTime     field.Field  // 操作时间

	fieldMap map[string]field.Expr
}

func (s sysLogLogin) Table(newTableName string) *sysLogLogin {
	s.sysLogLoginDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysLogLogin) As(alias string) *sysLogLogin {
	s.sysLogLoginDo.DO = *(s.sysLogLoginDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysLogLogin) updateTableName(table string) *sysLogLogin {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.LoginType = field.NewInt64(table, "login_type")
	s.RequestMethod = field.NewString(table, "request_method")
	s.UserAgent = field.NewString(table, "user_agent")
	s.OperateName = field.NewString(table, "operate_name")
	s.Status = field.NewInt64(table, "status")
	s.Browser = field.NewString(table, "browser")
	s.Os = field.NewString(table, "os")
	s.OperateIP = field.NewString(table, "operate_ip")
	s.OperateLocation = field.NewString(table, "operate_location")
	s.Msg = field.NewString(table, "msg")
	s.OperateTime = field.NewField(table, "operate_time")

	s.fillFieldMap()

	return s
}

func (s *sysLogLogin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysLogLogin) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["login_type"] = s.LoginType
	s.fieldMap["request_method"] = s.RequestMethod
	s.fieldMap["user_agent"] = s.UserAgent
	s.fieldMap["operate_name"] = s.OperateName
	s.fieldMap["status"] = s.Status
	s.fieldMap["browser"] = s.Browser
	s.fieldMap["os"] = s.Os
	s.fieldMap["operate_ip"] = s.OperateIP
	s.fieldMap["operate_location"] = s.OperateLocation
	s.fieldMap["msg"] = s.Msg
	s.fieldMap["operate_time"] = s.OperateTime
}

func (s sysLogLogin) clone(db *gorm.DB) sysLogLogin {
	s.sysLogLoginDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysLogLogin) replaceDB(db *gorm.DB) sysLogLogin {
	s.sysLogLoginDo.ReplaceDB(db)
	return s
}

type sysLogLoginDo struct{ gen.DO }

type ISysLogLoginDo interface {
	gen.SubQuery
	Debug() ISysLogLoginDo
	WithContext(ctx context.Context) ISysLogLoginDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysLogLoginDo
	WriteDB() ISysLogLoginDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysLogLoginDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysLogLoginDo
	Not(conds ...gen.Condition) ISysLogLoginDo
	Or(conds ...gen.Condition) ISysLogLoginDo
	Select(conds ...field.Expr) ISysLogLoginDo
	Where(conds ...gen.Condition) ISysLogLoginDo
	Order(conds ...field.Expr) ISysLogLoginDo
	Distinct(cols ...field.Expr) ISysLogLoginDo
	Omit(cols ...field.Expr) ISysLogLoginDo
	Join(table schema.Tabler, on ...field.Expr) ISysLogLoginDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysLogLoginDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysLogLoginDo
	Group(cols ...field.Expr) ISysLogLoginDo
	Having(conds ...gen.Condition) ISysLogLoginDo
	Limit(limit int) ISysLogLoginDo
	Offset(offset int) ISysLogLoginDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysLogLoginDo
	Unscoped() ISysLogLoginDo
	Create(values ...*model.SysLogLogin) error
	CreateInBatches(values []*model.SysLogLogin, batchSize int) error
	Save(values ...*model.SysLogLogin) error
	First() (*model.SysLogLogin, error)
	Take() (*model.SysLogLogin, error)
	Last() (*model.SysLogLogin, error)
	Find() ([]*model.SysLogLogin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysLogLogin, err error)
	FindInBatches(result *[]*model.SysLogLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysLogLogin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysLogLoginDo
	Assign(attrs ...field.AssignExpr) ISysLogLoginDo
	Joins(fields ...field.RelationField) ISysLogLoginDo
	Preload(fields ...field.RelationField) ISysLogLoginDo
	FirstOrInit() (*model.SysLogLogin, error)
	FirstOrCreate() (*model.SysLogLogin, error)
	FindByPage(offset int, limit int) (result []*model.SysLogLogin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysLogLoginDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysLogLoginDo) Debug() ISysLogLoginDo {
	return s.withDO(s.DO.Debug())
}

func (s sysLogLoginDo) WithContext(ctx context.Context) ISysLogLoginDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysLogLoginDo) ReadDB() ISysLogLoginDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysLogLoginDo) WriteDB() ISysLogLoginDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysLogLoginDo) Session(config *gorm.Session) ISysLogLoginDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysLogLoginDo) Clauses(conds ...clause.Expression) ISysLogLoginDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysLogLoginDo) Returning(value interface{}, columns ...string) ISysLogLoginDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysLogLoginDo) Not(conds ...gen.Condition) ISysLogLoginDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysLogLoginDo) Or(conds ...gen.Condition) ISysLogLoginDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysLogLoginDo) Select(conds ...field.Expr) ISysLogLoginDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysLogLoginDo) Where(conds ...gen.Condition) ISysLogLoginDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysLogLoginDo) Order(conds ...field.Expr) ISysLogLoginDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysLogLoginDo) Distinct(cols ...field.Expr) ISysLogLoginDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysLogLoginDo) Omit(cols ...field.Expr) ISysLogLoginDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysLogLoginDo) Join(table schema.Tabler, on ...field.Expr) ISysLogLoginDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysLogLoginDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysLogLoginDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysLogLoginDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysLogLoginDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysLogLoginDo) Group(cols ...field.Expr) ISysLogLoginDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysLogLoginDo) Having(conds ...gen.Condition) ISysLogLoginDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysLogLoginDo) Limit(limit int) ISysLogLoginDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysLogLoginDo) Offset(offset int) ISysLogLoginDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysLogLoginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysLogLoginDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysLogLoginDo) Unscoped() ISysLogLoginDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysLogLoginDo) Create(values ...*model.SysLogLogin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysLogLoginDo) CreateInBatches(values []*model.SysLogLogin, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysLogLoginDo) Save(values ...*model.SysLogLogin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysLogLoginDo) First() (*model.SysLogLogin, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLogLogin), nil
	}
}

func (s sysLogLoginDo) Take() (*model.SysLogLogin, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLogLogin), nil
	}
}

func (s sysLogLoginDo) Last() (*model.SysLogLogin, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLogLogin), nil
	}
}

func (s sysLogLoginDo) Find() ([]*model.SysLogLogin, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysLogLogin), err
}

func (s sysLogLoginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysLogLogin, err error) {
	buf := make([]*model.SysLogLogin, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysLogLoginDo) FindInBatches(result *[]*model.SysLogLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysLogLoginDo) Attrs(attrs ...field.AssignExpr) ISysLogLoginDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysLogLoginDo) Assign(attrs ...field.AssignExpr) ISysLogLoginDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysLogLoginDo) Joins(fields ...field.RelationField) ISysLogLoginDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysLogLoginDo) Preload(fields ...field.RelationField) ISysLogLoginDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysLogLoginDo) FirstOrInit() (*model.SysLogLogin, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLogLogin), nil
	}
}

func (s sysLogLoginDo) FirstOrCreate() (*model.SysLogLogin, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLogLogin), nil
	}
}

func (s sysLogLoginDo) FindByPage(offset int, limit int) (result []*model.SysLogLogin, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysLogLoginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysLogLoginDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysLogLoginDo) Delete(models ...*model.SysLogLogin) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysLogLoginDo) withDO(do gen.Dao) *sysLogLoginDo {
	s.DO = *do.(*gen.DO)
	return s
}
