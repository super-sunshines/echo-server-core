// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	SysDepartment     *sysDepartment
	SysDict           *sysDict
	SysDictChild      *sysDictChild
	SysLoginInfo      *sysLoginInfo
	SysMenu           *sysMenu
	SysMenuMetum      *sysMenuMetum
	SysOperateLog     *sysOperateLog
	SysRole           *sysRole
	SysUser           *sysUser
	SysUserDepartment *sysUserDepartment
	SysUserThirdBind  *sysUserThirdBind
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	SysDepartment = &Q.SysDepartment
	SysDict = &Q.SysDict
	SysDictChild = &Q.SysDictChild
	SysLoginInfo = &Q.SysLoginInfo
	SysMenu = &Q.SysMenu
	SysMenuMetum = &Q.SysMenuMetum
	SysOperateLog = &Q.SysOperateLog
	SysRole = &Q.SysRole
	SysUser = &Q.SysUser
	SysUserDepartment = &Q.SysUserDepartment
	SysUserThirdBind = &Q.SysUserThirdBind
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		SysDepartment:     newSysDepartment(db, opts...),
		SysDict:           newSysDict(db, opts...),
		SysDictChild:      newSysDictChild(db, opts...),
		SysLoginInfo:      newSysLoginInfo(db, opts...),
		SysMenu:           newSysMenu(db, opts...),
		SysMenuMetum:      newSysMenuMetum(db, opts...),
		SysOperateLog:     newSysOperateLog(db, opts...),
		SysRole:           newSysRole(db, opts...),
		SysUser:           newSysUser(db, opts...),
		SysUserDepartment: newSysUserDepartment(db, opts...),
		SysUserThirdBind:  newSysUserThirdBind(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	SysDepartment     sysDepartment
	SysDict           sysDict
	SysDictChild      sysDictChild
	SysLoginInfo      sysLoginInfo
	SysMenu           sysMenu
	SysMenuMetum      sysMenuMetum
	SysOperateLog     sysOperateLog
	SysRole           sysRole
	SysUser           sysUser
	SysUserDepartment sysUserDepartment
	SysUserThirdBind  sysUserThirdBind
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		SysDepartment:     q.SysDepartment.clone(db),
		SysDict:           q.SysDict.clone(db),
		SysDictChild:      q.SysDictChild.clone(db),
		SysLoginInfo:      q.SysLoginInfo.clone(db),
		SysMenu:           q.SysMenu.clone(db),
		SysMenuMetum:      q.SysMenuMetum.clone(db),
		SysOperateLog:     q.SysOperateLog.clone(db),
		SysRole:           q.SysRole.clone(db),
		SysUser:           q.SysUser.clone(db),
		SysUserDepartment: q.SysUserDepartment.clone(db),
		SysUserThirdBind:  q.SysUserThirdBind.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		SysDepartment:     q.SysDepartment.replaceDB(db),
		SysDict:           q.SysDict.replaceDB(db),
		SysDictChild:      q.SysDictChild.replaceDB(db),
		SysLoginInfo:      q.SysLoginInfo.replaceDB(db),
		SysMenu:           q.SysMenu.replaceDB(db),
		SysMenuMetum:      q.SysMenuMetum.replaceDB(db),
		SysOperateLog:     q.SysOperateLog.replaceDB(db),
		SysRole:           q.SysRole.replaceDB(db),
		SysUser:           q.SysUser.replaceDB(db),
		SysUserDepartment: q.SysUserDepartment.replaceDB(db),
		SysUserThirdBind:  q.SysUserThirdBind.replaceDB(db),
	}
}

type queryCtx struct {
	SysDepartment     ISysDepartmentDo
	SysDict           ISysDictDo
	SysDictChild      ISysDictChildDo
	SysLoginInfo      ISysLoginInfoDo
	SysMenu           ISysMenuDo
	SysMenuMetum      ISysMenuMetumDo
	SysOperateLog     ISysOperateLogDo
	SysRole           ISysRoleDo
	SysUser           ISysUserDo
	SysUserDepartment ISysUserDepartmentDo
	SysUserThirdBind  ISysUserThirdBindDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		SysDepartment:     q.SysDepartment.WithContext(ctx),
		SysDict:           q.SysDict.WithContext(ctx),
		SysDictChild:      q.SysDictChild.WithContext(ctx),
		SysLoginInfo:      q.SysLoginInfo.WithContext(ctx),
		SysMenu:           q.SysMenu.WithContext(ctx),
		SysMenuMetum:      q.SysMenuMetum.WithContext(ctx),
		SysOperateLog:     q.SysOperateLog.WithContext(ctx),
		SysRole:           q.SysRole.WithContext(ctx),
		SysUser:           q.SysUser.WithContext(ctx),
		SysUserDepartment: q.SysUserDepartment.WithContext(ctx),
		SysUserThirdBind:  q.SysUserThirdBind.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
