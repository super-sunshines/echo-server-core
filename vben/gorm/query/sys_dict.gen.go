// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/super-sunshines/echo-server-core/vben/gorm/model"
)

func newSysDict(db *gorm.DB, opts ...gen.DOOption) sysDict {
	_sysDict := sysDict{}

	_sysDict.sysDictDo.UseDB(db, opts...)
	_sysDict.sysDictDo.UseModel(&model.SysDict{})

	tableName := _sysDict.sysDictDo.TableName()
	_sysDict.ALL = field.NewAsterisk(tableName)
	_sysDict.ID = field.NewInt64(tableName, "id")
	_sysDict.Module = field.NewInt64(tableName, "module")
	_sysDict.Code = field.NewString(tableName, "code")
	_sysDict.Regular = field.NewString(tableName, "regular")
	_sysDict.Name = field.NewString(tableName, "name")
	_sysDict.ValueType = field.NewInt64(tableName, "value_type")
	_sysDict.Describe = field.NewString(tableName, "describe")
	_sysDict.EnableStatus = field.NewInt64(tableName, "enable_status")
	_sysDict.CreateDept = field.NewInt64(tableName, "create_dept")
	_sysDict.CreateBy = field.NewInt64(tableName, "create_by")
	_sysDict.CreateTime = field.NewField(tableName, "create_time")
	_sysDict.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysDict.UpdateTime = field.NewField(tableName, "update_time")
	_sysDict.DeleteTime = field.NewField(tableName, "delete_time")

	_sysDict.fillFieldMap()

	return _sysDict
}

type sysDict struct {
	sysDictDo

	ALL          field.Asterisk
	ID           field.Int64
	Module       field.Int64  // 所属模块
	Code         field.String // 字符串代码
	Regular      field.String // 正则字符串
	Name         field.String // 字典名称
	ValueType    field.Int64  // 字典值类型
	Describe     field.String // 描述
	EnableStatus field.Int64  // 启用状态
	CreateDept   field.Int64  // 创建部门
	CreateBy     field.Int64  // 创建者
	CreateTime   field.Field  // 创建时间
	UpdateBy     field.Int64  // 更新者
	UpdateTime   field.Field  // 更新时间
	DeleteTime   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysDict) Table(newTableName string) *sysDict {
	s.sysDictDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysDict) As(alias string) *sysDict {
	s.sysDictDo.DO = *(s.sysDictDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysDict) updateTableName(table string) *sysDict {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Module = field.NewInt64(table, "module")
	s.Code = field.NewString(table, "code")
	s.Regular = field.NewString(table, "regular")
	s.Name = field.NewString(table, "name")
	s.ValueType = field.NewInt64(table, "value_type")
	s.Describe = field.NewString(table, "describe")
	s.EnableStatus = field.NewInt64(table, "enable_status")
	s.CreateDept = field.NewInt64(table, "create_dept")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewField(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewField(table, "update_time")
	s.DeleteTime = field.NewField(table, "delete_time")

	s.fillFieldMap()

	return s
}

func (s *sysDict) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysDict) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["module"] = s.Module
	s.fieldMap["code"] = s.Code
	s.fieldMap["regular"] = s.Regular
	s.fieldMap["name"] = s.Name
	s.fieldMap["value_type"] = s.ValueType
	s.fieldMap["describe"] = s.Describe
	s.fieldMap["enable_status"] = s.EnableStatus
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["delete_time"] = s.DeleteTime
}

func (s sysDict) clone(db *gorm.DB) sysDict {
	s.sysDictDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysDict) replaceDB(db *gorm.DB) sysDict {
	s.sysDictDo.ReplaceDB(db)
	return s
}

type sysDictDo struct{ gen.DO }

type ISysDictDo interface {
	gen.SubQuery
	Debug() ISysDictDo
	WithContext(ctx context.Context) ISysDictDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysDictDo
	WriteDB() ISysDictDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysDictDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysDictDo
	Not(conds ...gen.Condition) ISysDictDo
	Or(conds ...gen.Condition) ISysDictDo
	Select(conds ...field.Expr) ISysDictDo
	Where(conds ...gen.Condition) ISysDictDo
	Order(conds ...field.Expr) ISysDictDo
	Distinct(cols ...field.Expr) ISysDictDo
	Omit(cols ...field.Expr) ISysDictDo
	Join(table schema.Tabler, on ...field.Expr) ISysDictDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysDictDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysDictDo
	Group(cols ...field.Expr) ISysDictDo
	Having(conds ...gen.Condition) ISysDictDo
	Limit(limit int) ISysDictDo
	Offset(offset int) ISysDictDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDictDo
	Unscoped() ISysDictDo
	Create(values ...*model.SysDict) error
	CreateInBatches(values []*model.SysDict, batchSize int) error
	Save(values ...*model.SysDict) error
	First() (*model.SysDict, error)
	Take() (*model.SysDict, error)
	Last() (*model.SysDict, error)
	Find() ([]*model.SysDict, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDict, err error)
	FindInBatches(result *[]*model.SysDict, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysDict) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysDictDo
	Assign(attrs ...field.AssignExpr) ISysDictDo
	Joins(fields ...field.RelationField) ISysDictDo
	Preload(fields ...field.RelationField) ISysDictDo
	FirstOrInit() (*model.SysDict, error)
	FirstOrCreate() (*model.SysDict, error)
	FindByPage(offset int, limit int) (result []*model.SysDict, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysDictDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysDictDo) Debug() ISysDictDo {
	return s.withDO(s.DO.Debug())
}

func (s sysDictDo) WithContext(ctx context.Context) ISysDictDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysDictDo) ReadDB() ISysDictDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysDictDo) WriteDB() ISysDictDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysDictDo) Session(config *gorm.Session) ISysDictDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysDictDo) Clauses(conds ...clause.Expression) ISysDictDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysDictDo) Returning(value interface{}, columns ...string) ISysDictDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysDictDo) Not(conds ...gen.Condition) ISysDictDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysDictDo) Or(conds ...gen.Condition) ISysDictDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysDictDo) Select(conds ...field.Expr) ISysDictDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysDictDo) Where(conds ...gen.Condition) ISysDictDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysDictDo) Order(conds ...field.Expr) ISysDictDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysDictDo) Distinct(cols ...field.Expr) ISysDictDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysDictDo) Omit(cols ...field.Expr) ISysDictDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysDictDo) Join(table schema.Tabler, on ...field.Expr) ISysDictDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysDictDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysDictDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysDictDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysDictDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysDictDo) Group(cols ...field.Expr) ISysDictDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysDictDo) Having(conds ...gen.Condition) ISysDictDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysDictDo) Limit(limit int) ISysDictDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysDictDo) Offset(offset int) ISysDictDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysDictDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDictDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysDictDo) Unscoped() ISysDictDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysDictDo) Create(values ...*model.SysDict) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysDictDo) CreateInBatches(values []*model.SysDict, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysDictDo) Save(values ...*model.SysDict) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysDictDo) First() (*model.SysDict, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDict), nil
	}
}

func (s sysDictDo) Take() (*model.SysDict, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDict), nil
	}
}

func (s sysDictDo) Last() (*model.SysDict, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDict), nil
	}
}

func (s sysDictDo) Find() ([]*model.SysDict, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysDict), err
}

func (s sysDictDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDict, err error) {
	buf := make([]*model.SysDict, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysDictDo) FindInBatches(result *[]*model.SysDict, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysDictDo) Attrs(attrs ...field.AssignExpr) ISysDictDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysDictDo) Assign(attrs ...field.AssignExpr) ISysDictDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysDictDo) Joins(fields ...field.RelationField) ISysDictDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysDictDo) Preload(fields ...field.RelationField) ISysDictDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysDictDo) FirstOrInit() (*model.SysDict, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDict), nil
	}
}

func (s sysDictDo) FirstOrCreate() (*model.SysDict, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDict), nil
	}
}

func (s sysDictDo) FindByPage(offset int, limit int) (result []*model.SysDict, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysDictDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysDictDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysDictDo) Delete(models ...*model.SysDict) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysDictDo) withDO(do gen.Dao) *sysDictDo {
	s.DO = *do.(*gen.DO)
	return s
}
